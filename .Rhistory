library(swirl)
swirl()
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exist
exit
library(datasets)
data(iris)
?iris
dni3 <- dimnames(iris3)
dni3
tatti <- iris$Sepal.Length
mean(tatti)
iris
mean(tatti,101:150)
tatti <- mean(iris$Sepal.Length, 101:150)
tatti <- iris$Sepal.Length,101:150
tatti <- rowmeans(iris$Sepal.Length,101:150)
str(lapply)
lapply
tapply
str(tapply)
str(vapply)
str(lapply)
str(sapply)
str(split)
?split
library(datasets)
data(iris)
?iris
tatti <- list(iris$Sepal.Length)
lapply(tatti)
lapply(tatti, mean)
lapply(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean(101:150))
lapply(mean(iris$Sepal.Length, iris[101:150,])  )
mean(iris$Sepal.Length, iris[])
iris[,]
mean(iris$Sepal.Length, iris$Species== "virginica")
mean(iris$Sepal.Length, (iris$Species== "virginica"))
mean(iris$Sepal.Length, [iris$Species== "virginica"])
mean(iris$Sepal.Length, iris$Species== ["virginica"])
mean(iris$Sepal.Length [iris$Species== "virginica"])
mean(iris$Sepal.Length [iris$Species== "virginica"], na.rm = TRUE)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
rowMeans(iris[,1:4])
apply(iris,2,mean)
apply(iris,1,mean)
colMeans(iris)
colMeans(iris[,])
colMeans(iris[,1:4])
library(datasets)
data("mtcars")
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
fourc<- mean(mtcars$cyl == 4)
fourc
etc <- mean(mtcars$cyl == 8)
fourc - etc
-(fourc - etc)
debug(ls)
ls
ls()
3
4
pos <- tryCatch(name, error = function(e) e)
2
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
ls
debug
1
1
1
1
1
1
2
2
2
Q
## Sample data
a <- 1:10
b <- 11:15
c <- numeric()
vectors <- list(a=a, b=b, c=c)
## Results vector
results <- numeric()
## Initialize start and end indices
start <- end <- 0
for(index in seq_along(vectors)) {
values <- vectors[[index]]
size <- length(values)
if(size > 0) {
start <- end + 1
end <- start + size - 1
results[start:end] <- values
}
}
q
q
## Sample data
a <- 1:10
b <- 11:15
c <- numeric()
vectors <- list(a=a, b=b, c=c)
## Results vector
results <- numeric()
## Initialize start and end indices
start <- end <- 0
for(index in seq_along(vectors)) {
values <- vectors[[index]]
size <- length(values)
if(size > 0) {
start <- end + 1
end <- start + size - 1
results[start:end] <- values
}
}
results
## Sample data
frames <- list(data.frame(a=1:10, b=21:30), data.frame(a=11:15, b=31:35))
## Results vector
results <- list(a=numeric(), b=numeric())
## Initialize start and end indices
start.a <- start.b <- end.a <- end.b <- 0
for(index in seq_along(frames)) {
values <- frames[[index]]
size.a <- length(values$a)
size.b <- length(values$b)
if(size.a > 0) {
start.a <- end.a + 1
end.a <- start.a + size.a - 1
results$a[start.a:end.a] <- values$a
}
if(size.b > 0) {
start.b <- end.b + 1
end.b <- start.b + size.b - 1
results$b[start.b:end.b] <- values$b
}
}
results <- data.frame(a=unlist(results$a), b=unlist(results$b))
summary(results)
frames
r <- 1:50
dim(r) <- (5,10)
dim(r) <- c(5,10)
r
dim(r) <- c(10,5)
r
dim(r) <- c(10,2)
?frames
?data.frame
?matrix
?"array"
?matrix
?data.frame
?frame
?odd
help(for loop)
?for
loop
?list
Y=rep(1:2, 5)
y
Y
Y=(1:2, 5)
(1:2, 5)
(1:2
1:2
1:2
df[df$Y == 2, ]
Y=rep(1:2, 5)
df[df$Y == 2, ]
v1 <- c(4,5,6)
v2 <- numeric()
for(idx in v1)
v2[idx] <- idx
v2
X <- Y <- numeric()
idx <- 1
for(value in v1) {
X[idx] <- value
Y[idx] <- value^2
idx <- idx + 1
}
DF <- data.frame(X, Y, row.names=LETTERS[X])
df
DF
x <- 1:6
x
vector(x, sqrt)
lapply(x, sqrt)
unlist(x)
babs<-lapply(x, sqrt)
unlist(babs)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m
m <-1:5
m
makeVector(1:5)
makeVector(1,2,3,4,5,6)
makeVector(4)
?inverse
?inv
?list
##makeCacheMatrix
#set the value of matrix
makeCacheMatrix <- function(x = numeric())
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
##makeCacheMatrix
#set the value of matrix
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
x = rbind(c(1, -1/4), c(-1/4,1))
x
m = makeCacheMatrix(x)
m <- makeCacheMatrix(x)
m$get()
m$getinverse()
##cacheSolve
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
inv <-  solve(data)
x$setinverse(m)
m
}
m
m
m$get()
cacheSolve(m)
##cacheSolve
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
inv <-  solve(data)
x$setinverse(m)
m
}
cacheSolve(m)
x = rbind(c(1, -1/4), c(-1/4,1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
##cacheSolve
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <-  solve(data)
x$setinverse(m)
m
}
cacheSolve(m)
x=rbind(c(1,2),(3,4))
x=rbind(c(1,2),c(3,4))
m = makeCacheMatrix(x)
m
m$get()
rmat = makeCacheMatrix(x)
rmat$get()
cacheSolve(rmat)
cacheSolve()
##makeCacheMatrix
#set the value of matrix
makeCacheMatrix <- function(x = matrix()) {
#set the value of the vector
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
#get the value of the vector
get <- function() x
#set the value of the inverse
setinverse <- function(inverse) I <<- inverse
#get the value of the inverse
getinverse <- function() I
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
##cacheSolve
# calculates the inverse of special vector
cacheSolve <- function(x, ...) {
I <- x$getinverse()
# checks & gets if the inverse has been calculated before
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- x$get()
I <-  solve(data, ...)
x$setinverse(I)
m
}
I
##cacheSolve
# calculates the inverse of special vector
cacheSolve <- function(x, ...) {
I <- x$getinverse()
# checks & gets if the inverse has been calculated before
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- x$get()
I <-  solve(data, ...)
x$setinverse(I)
I
}
#sample run
x =cbind(c(1,2),c(3,4))
x
I = makeCacheMatrix(x)
I
I$get()
cacheSolve(I)
cacheSolve(I)
cacheSolve(m)
cacheSolve(m)
NULL
##Matrix inversion is usually a costly computation and there may be some benefit to
##caching the inverse of a matrix rather than compute it repeatedly (there are also alternatives to matrix inversion
##that we will not discuss here). Your assignment is to write a pair of functions that cache the inverse of a matrix.
#makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
#set the value of the matrix
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
#get the value of the matrix
get <- function() x
#set the value of the inverse
setinverse <- function(inverse) I <<- inverse
#get the value of the inverse
getinverse <- function() I
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
#cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed),
#then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
I <- x$getinverse()
# retrieves the inverse matrix x, if it has been calculated before
if(!is.null(I)) {
message("getting cached data")
return(I)
}
# otherwise, solves the matrix
data <- x$get()
I <-  solve(data, ...)
x$setinverse(I)
I
}
x =cbind(c(1,2),c(3,4))
I = makeCacheMatrix(x)
cacheSolve(I)
